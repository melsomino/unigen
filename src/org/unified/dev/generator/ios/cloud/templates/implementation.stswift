~+ header~

public class Default~= module.name ~CloudApi: ~= module.name ~CloudApi, CloudConnectorDependent {

	// MARK: - Component


	public var dependency: DependencyResolver!


	// MARK: - Methods


~ for (Cloud_method method : api.methods) { ~
	public ~+ method_header~ {
		let methodUrl = cloudConnector.makeUrl(~= swift.quoted(method.url) ~)
~= swift.method_params_assignment(method)~
~	if (method.params != null && method.result != null) { ~
		let resultJson = try cloudConnector.invokeService(methodUrl, ~= method.protocol ~, ~= swift.quoted(method.method) ~, params)
		let result = ~= swift.method_result_decoder(method.result, "resultJson")~
		return result
~	} ~
~	else if (method.params != null) { ~
		try cloudConnector.invokeService(methodUrl, ~= method.protocol ~, ~= swift.quoted(method.method) ~, params)
~	} ~
~	else if (method.result != null) { ~
		let resultJson = try cloudConnector.invokeService(methodUrl, ~= method.protocol ~, ~= swift.quoted(method.method) ~, params)
		let result = ~= swift.method_result_decoder(method.result, "resultJson")~
		return result
~	} ~
~	else { ~
		try cloudConnector.invokeService(methodUrl, ~= method.protocol ~, ~= swift.quoted(method.method) ~, nil)
~	} ~
	}

~ } ~


}

// MARK: - Types

~ for (Cloud_struct_type struct_type : api.struct_types) { 
	String name = org.unified.dev.generator.Generator.lowercase_first_letter(struct_type.implementation_name); ~

extension ~=struct_type.interface_name~ {
	public static let typeConverter = SbisType<~=struct_type.interface_name~> (
		fields: ~= swift.struct_type_fields(struct_type).replace(",", ", ")~,
		decode: { values in
			let result = ~= struct_type.interface_name ~()
~= swift.struct_type_decoder(struct_type)~
			return result
		}
	)

}
~ } ~