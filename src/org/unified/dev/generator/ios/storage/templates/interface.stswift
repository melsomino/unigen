~+header~

public protocol ~=storage.module~Storage: Dependent {

	var moduleStorage: ModuleStorage { get }
	func readDatabase(read: (~=storage.module~DatabaseReader) throws -> Void) throws
	func writeDatabase(write: (~=storage.module~DatabaseWriter) throws -> Void) throws

~for (Storage_folder folder : storage.folders) {~
	var ~=folder.name~: String { get }
~}~

	// MARK: - Record Type Creation


~ for (Record_type record_type : storage.record_types) { ~
~	if (record_type.is_table_record) { ~
	func create~=record_type.name~() -> ~=record_type.name~
~	} ~
~ } ~

}


public protocol ~=storage.module~DatabaseReader {

~ for (Storage_query query : storage.queries) { ~
	~+query_header~
~ } ~

}


public protocol ~=storage.module~DatabaseWriter: ~=storage.module~DatabaseReader {
~ for (Storage_table table : storage.tables) { ~
	func update(records: ~=table.record_type.name~...)
	func insert(records: ~=table.record_type.name~...)
	func delete(records: ~=table.record_type.name~...)
	func update(records: [~=table.record_type.name~])
	func insert(records: [~=table.record_type.name~])
	func delete(records: [~=table.record_type.name~])
~ } ~

}


// MARK: - Record Types
~ for (Record_type record_type : storage.record_types ) { ~


public protocol ~=record_type.name~: AnyObject {

~	for (Table_field field : record_type.fields) { ~
	var ~=field.name~: ~=swift.from_field_type(field.type)~? { get set }
~	} ~

	func clear()
	func copy() -> ~=record_type.name~

	// MARK: - Internals

	var _assignedFields: Int { get }
}
~ } ~