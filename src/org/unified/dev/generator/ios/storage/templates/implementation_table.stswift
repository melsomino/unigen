~
	String name = org.unified.dev.generator.Generator.lowercase_first_letter(table.name);
~
		private static let ~=name~SqlFactory = DatabaseRecordSqlFactory<~=table.record_type.name~>(
		"~=table.name~", { record in record._assignedFields }, [
~	for (Table_field field : table.fields) { ~
			DatabaseRecordField("~=field.name~", ~=field.included_in_primary_key~, { statement, index, record in statement.~=field.type.param_setter()~(index, record.~=field.name~) }),
~	} ~
		])

		private var ~=name~StatementFactory: DatabaseRecordStatementFactory<~=table.record_type.name~>

		public func update(records: ~=table.record_type.name~...) {
			~=name~StatementFactory.updates.execute(records)
		}

		public func insert(records: ~=table.record_type.name~...) {
			~=name~StatementFactory.inserts.execute(records)
		}

		public func delete(records: ~=table.record_type.name~...) {
			~=name~StatementFactory.deletes.execute(records)
		}

		public func update(records: [~=table.record_type.name~]) {
			~=name~StatementFactory.updates.execute(records)
		}

		public func insert(records: [~=table.record_type.name~]) {
			~=name~StatementFactory.inserts.execute(records)
		}

		public func delete(records: [~=table.record_type.name~]) {
			~=name~StatementFactory.deletes.execute(records)
		}
